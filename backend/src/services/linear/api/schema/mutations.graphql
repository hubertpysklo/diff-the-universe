type Mutation {
  """Creates an agent activity."""
  agentActivityCreate(
    """The agent activity object to create."""
    input: AgentActivityCreateInput!
  ): AgentActivityPayload!

  """[Internal] Creates a prompt agent activity from Linear user input."""
  agentActivityCreatePrompt(
    """The prompt agent activity object to create."""
    input: AgentActivityCreatePromptInput!
  ): AgentActivityPayload!

  """Creates a new agent session on a rootcomment."""
  agentSessionCreateOnComment(
    """The agent session object to create."""
    input: AgentSessionCreateOnComment!
  ): AgentSessionPayload!

  """Creates a new agent session on an issue."""
  agentSessionCreateOnIssue(
    """The agent session object to create."""
    input: AgentSessionCreateOnIssue!
  ): AgentSessionPayload!

  """
  Updates the externalUrl of an agent session, which is an agent-hosted page associated with this session.
  """
  agentSessionUpdateExternalUrl(
    """The identifier of the agent session to update."""
    id: String!

    """The agent session object to update."""
    input: AgentSessionUpdateExternalUrlInput!
  ): AgentSessionPayload!

  """Creates an integration api key for Airbyte to connect with Linear."""
  airbyteIntegrationConnect(
    """Airbyte integration settings."""
    input: AirbyteConfigurationInput!
  ): IntegrationPayload!

  """[INTERNAL] Creates a new API key."""
  apiKeyCreate(
    """The api key object to create."""
    input: ApiKeyCreateInput!
  ): ApiKeyPayload!

  """[INTERNAL] Deletes an API key."""
  apiKeyDelete(
    """The identifier of the API key to delete."""
    id: String!
  ): DeletePayload!

  """[INTERNAL] Updates an API key's allowed teams."""
  apiKeyUpdate(
    """The identifier of the API key to update."""
    id: String!

    """The update input."""
    input: ApiKeyUpdateInput!
  ): ApiKeyPayload!

  """
  Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
  """
  attachmentCreate(
    """The attachment object to create."""
    input: AttachmentCreateInput!
  ): AttachmentPayload!

  """Deletes an issue attachment."""
  attachmentDelete(
    """The identifier of the attachment to delete."""
    id: String!
  ): DeletePayload!

  """Link an existing Discord message to an issue."""
  attachmentLinkDiscord(
    """The Discord channel ID for the message to link."""
    channelId: String!

    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Discord message."""
    issueId: String!

    """The Discord message ID for the message to link."""
    messageId: String!

    """The title to use for the attachment."""
    title: String

    """The Discord message URL for the message to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Front conversation to an issue."""
  attachmentLinkFront(
    """The Front conversation ID to link."""
    conversationId: String!

    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Front conversation."""
    issueId: String!

    """The title to use for the attachment."""
    title: String
  ): FrontAttachmentPayload!

  """Link a GitHub issue to a Linear issue."""
  attachmentLinkGitHubIssue(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The Linear issue for which to link the GitHub issue."""
    issueId: String!

    """The title to use for the attachment."""
    title: String

    """The URL of the GitHub issue to link."""
    url: String!
  ): AttachmentPayload!

  """Link a GitHub pull request to an issue."""
  attachmentLinkGitHubPR(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the GitHub pull request."""
    issueId: String!

    """[Internal] The kind of link between the issue and the pull request."""
    linkKind: GitLinkKind

    """The GitHub pull request number to link."""
    number: Float @deprecated(reason: "No longer required")

    """The owner of the GitHub repository."""
    owner: String @deprecated(reason: "No longer required")

    """The name of the GitHub repository."""
    repo: String @deprecated(reason: "No longer required")

    """The title to use for the attachment."""
    title: String

    """The URL of the GitHub pull request to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing GitLab MR to an issue."""
  attachmentLinkGitLabMR(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the GitLab merge request."""
    issueId: String!

    """The GitLab merge request number to link."""
    number: Float!

    """
    The path name to the project including any (sub)groups. E.g. linear/main/client.
    """
    projectPathWithNamespace: String!

    """The title to use for the attachment."""
    title: String

    """The URL of the GitLab merge request to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Intercom conversation to an issue."""
  attachmentLinkIntercom(
    """The Intercom conversation ID to link."""
    conversationId: String!

    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Intercom conversation."""
    issueId: String!

    """An optional Intercom conversation part ID to link to"""
    partId: String

    """The title to use for the attachment."""
    title: String
  ): AttachmentPayload!

  """Link an existing Jira issue to an issue."""
  attachmentLinkJiraIssue(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Jira issue."""
    issueId: String!

    """The Jira issue key or ID to link."""
    jiraIssueId: String!

    """The title to use for the attachment."""
    title: String

    """Optional fallback URL to use if the Jira issue cannot be found."""
    url: String
  ): AttachmentPayload!

  """Link an existing Salesforce case to an issue."""
  attachmentLinkSalesforce(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Salesforce case."""
    issueId: String!

    """The title to use for the attachment."""
    title: String

    """The URL of the Salesforce case to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Slack message to an issue."""
  attachmentLinkSlack(
    """[DEPRECATED] The Slack channel ID for the message to link."""
    channel: String @deprecated(reason: "This field is now ignored.")

    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue to which to link the Slack message."""
    issueId: String!

    """[DEPRECATED] The latest timestamp for the Slack message."""
    latest: String @deprecated(reason: "This field is now ignored.")

    """
    Whether to begin syncing the message's Slack thread with a comment thread on the issue.
    """
    syncToCommentThread: Boolean

    """The title to use for the attachment."""
    title: String

    """
    [DEPRECATED] Unique identifier of either a thread's parent message or a message in the thread.
    """
    ts: String @deprecated(reason: "This field is now ignored.")

    """The Slack message URL for the message to link."""
    url: String!
  ): AttachmentPayload!

  """Link any url to an issue."""
  attachmentLinkURL(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """The id for the attachment."""
    id: String

    """The issue for which to link the url."""
    issueId: String!

    """The title to use for the attachment."""
    title: String

    """The url to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Zendesk ticket to an issue."""
  attachmentLinkZendesk(
    """
    Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode.
    """
    createAsUser: String

    """
    Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode.
    """
    displayIconUrl: String

    """Optional attachment ID that may be provided through the API."""
    id: String

    """The issue for which to link the Zendesk ticket."""
    issueId: String!

    """The Zendesk ticket ID to link."""
    ticketId: String!

    """The title to use for the attachment."""
    title: String

    """The URL of the Zendesk ticket to link."""
    url: String
  ): AttachmentPayload!

  """
  Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue.
  """
  attachmentSyncToSlack(
    """The ID of the Slack attachment to begin syncing."""
    id: String!
  ): AttachmentPayload!

  """Updates an existing issue attachment."""
  attachmentUpdate(
    """The identifier of the attachment to update."""
    id: String!

    """A partial attachment object to update the attachment with."""
    input: AttachmentUpdateInput!
  ): AttachmentPayload!

  """Creates a new comment."""
  commentCreate(
    """The comment object to create."""
    input: CommentCreateInput!
  ): CommentPayload!

  """Deletes a comment."""
  commentDelete(
    """The identifier of the comment to delete."""
    id: String!
  ): DeletePayload!

  """Resolves a comment."""
  commentResolve(
    """The identifier of the comment to update."""
    id: String!
    resolvingCommentId: String
  ): CommentPayload!

  """Unresolves a comment."""
  commentUnresolve(
    """The identifier of the comment to update."""
    id: String!
  ): CommentPayload!

  """Updates a comment."""
  commentUpdate(
    """The identifier of the comment to update."""
    id: String!

    """A partial comment object to update the comment with."""
    input: CommentUpdateInput!
  ): CommentPayload!

  """Saves user message."""
  contactCreate(
    """The contact entry to create."""
    input: ContactCreateInput!
  ): ContactPayload!

  """[INTERNAL] Saves sales pricing inquiry to Front."""
  contactSalesCreate(
    """The contact entry to create."""
    input: ContactSalesCreateInput!
  ): ContactPayload!

  """Create CSV export report for the organization."""
  createCsvExportReport(includePrivateTeamIds: [String!]): CreateCsvExportReportPayload!

  """Create a notification to remind a user about an initiative update."""
  createInitiativeUpdateReminder(
    """The identifier of the initiative to remind about."""
    initiativeId: String!

    """
    The user identifier to whom the notification will be sent. By default, it is set to the initiative owner.
    """
    userId: String
  ): InitiativeUpdateReminderPayload!

  """Creates an organization from onboarding."""
  createOrganizationFromOnboarding(
    """Organization details for the new organization."""
    input: CreateOrganizationInput!

    """Onboarding survey."""
    survey: OnboardingCustomerSurvey
  ): CreateOrJoinOrganizationResponse!

  """Create a notification to remind a user about a project update."""
  createProjectUpdateReminder(
    """The identifier of the project to remind about."""
    projectId: String!

    """
    The user identifier to whom the notification will be sent. By default, it is set to the project lead.
    """
    userId: String
  ): ProjectUpdateReminderPayload!

  """Creates a new custom view."""
  customViewCreate(
    """The properties of the custom view to create."""
    input: CustomViewCreateInput!
  ): CustomViewPayload!

  """Deletes a custom view."""
  customViewDelete(
    """The identifier of the custom view to delete."""
    id: String!
  ): DeletePayload!

  """Updates a custom view."""
  customViewUpdate(
    """The identifier of the custom view to update."""
    id: String!

    """The properties of the custom view to update."""
    input: CustomViewUpdateInput!
  ): CustomViewPayload!

  """Creates a new customer."""
  customerCreate(
    """The customer to create."""
    input: CustomerCreateInput!
  ): CustomerPayload!

  """Deletes a customer."""
  customerDelete(
    """The identifier of the customer to delete."""
    id: String!
  ): DeletePayload!

  """Merges two customers."""
  customerMerge(
    """
    The ID of the customer to merge. The needs of this customer will be transferred before it gets deleted.
    """
    sourceCustomerId: String!

    """
    The ID of the target customer to merge into. The needs of this customer will be retained
    """
    targetCustomerId: String!
  ): CustomerPayload!

  """Archives a customer need."""
  customerNeedArchive(
    """The identifier of the customer need to archive."""
    id: String!
  ): CustomerNeedArchivePayload!

  """Creates a new customer need."""
  customerNeedCreate(
    """The customer need to create."""
    input: CustomerNeedCreateInput!
  ): CustomerNeedPayload!

  """Creates a new customer need out of an attachment"""
  customerNeedCreateFromAttachment(
    """The customer need to create."""
    input: CustomerNeedCreateFromAttachmentInput!
  ): CustomerNeedPayload!

  """Deletes a customer need."""
  customerNeedDelete(
    """The identifier of the customer need to delete."""
    id: String!

    """Whether to keep the attachment associated with the customer need."""
    keepAttachment: Boolean
  ): DeletePayload!

  """Unarchives a customer need."""
  customerNeedUnarchive(
    """The identifier of the customer need to unarchive."""
    id: String!
  ): CustomerNeedArchivePayload!

  """Updates a customer need"""
  customerNeedUpdate(
    """The identifier of the customer need to update."""
    id: String!

    """The properties of the customer need to update."""
    input: CustomerNeedUpdateInput!
  ): CustomerNeedUpdatePayload!

  """Creates a new customer status."""
  customerStatusCreate(
    """The CustomerStatus object to create."""
    input: CustomerStatusCreateInput!
  ): CustomerStatusPayload!

  """Deletes a customer status."""
  customerStatusDelete(
    """The identifier of the customer status to delete."""
    id: String!
  ): DeletePayload!

  """Updates a customer status."""
  customerStatusUpdate(
    """The identifier of the customer status to update."""
    id: String!

    """A partial CustomerStatus object to update the CustomerStatus with."""
    input: CustomerStatusUpdateInput!
  ): CustomerStatusPayload!

  """Creates a new customer tier."""
  customerTierCreate(
    """The CustomerTier object to create."""
    input: CustomerTierCreateInput!
  ): CustomerTierPayload!

  """Deletes a customer tier."""
  customerTierDelete(
    """The identifier of the customer tier to delete."""
    id: String!
  ): DeletePayload!

  """Updates a customer tier."""
  customerTierUpdate(
    """The identifier of the customer tier to update."""
    id: String!

    """A partial CustomerTier object to update the CustomerTier with."""
    input: CustomerTierUpdateInput!
  ): CustomerTierPayload!

  """Updates a customer"""
  customerUpdate(
    """The identifier of the customer to update."""
    id: String!

    """The properties of the customer to update."""
    input: CustomerUpdateInput!
  ): CustomerPayload!

  """
  Upserts a customer, creating it if it doesn't exists, updating it otherwise. Matches against an existing customer with `id` or `externalId`
  """
  customerUpsert(
    """The customer to create."""
    input: CustomerUpsertInput!
  ): CustomerPayload!

  """Archives a cycle."""
  cycleArchive(
    """The identifier of the cycle to archive."""
    id: String!
  ): CycleArchivePayload!

  """Creates a new cycle."""
  cycleCreate(
    """The cycle object to create."""
    input: CycleCreateInput!
  ): CyclePayload!

  """
  Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
  """
  cycleShiftAll(
    """A partial cycle object to update the cycle with."""
    input: CycleShiftAllInput!
  ): CyclePayload!

  """
  Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
  """
  cycleStartUpcomingCycleToday(
    """
    The identifier of the cycle to start as of midnight today. Must be the upcoming cycle.
    """
    id: String!
  ): CyclePayload!

  """Updates a cycle."""
  cycleUpdate(
    """The identifier of the cycle to update."""
    id: String!

    """A partial cycle object to update the cycle with."""
    input: CycleUpdateInput!
  ): CyclePayload!

  """Creates a new document."""
  documentCreate(
    """The document to create."""
    input: DocumentCreateInput!
  ): DocumentPayload!

  """Deletes (trashes) a document."""
  documentDelete(
    """The identifier of the document to delete."""
    id: String!
  ): DocumentArchivePayload!

  """Restores a document."""
  documentUnarchive(
    """The identifier of the document to restore."""
    id: String!
  ): DocumentArchivePayload!

  """Updates a document."""
  documentUpdate(
    """
    The identifier of the document to update. Also the identifier from the URL is accepted.
    """
    id: String!

    """A partial document object to update the document with."""
    input: DocumentUpdateInput!
  ): DocumentPayload!

  """Creates a new email intake address."""
  emailIntakeAddressCreate(
    """The email intake address object to create."""
    input: EmailIntakeAddressCreateInput!
  ): EmailIntakeAddressPayload!

  """Deletes an email intake address object."""
  emailIntakeAddressDelete(
    """The identifier of the email intake address to delete."""
    id: String!
  ): DeletePayload!

  """Rotates an existing email intake address."""
  emailIntakeAddressRotate(
    """The identifier of the email intake address."""
    id: String!
  ): EmailIntakeAddressPayload!

  """Updates an existing email intake address."""
  emailIntakeAddressUpdate(
    """The identifier of the email intake address."""
    id: String!

    """The properties of the email intake address to update."""
    input: EmailIntakeAddressUpdateInput!
  ): EmailIntakeAddressPayload!

  """Authenticates a user account via email and authentication token."""
  emailTokenUserAccountAuth(
    """The data used for token authentication."""
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!

  """Unsubscribes the user from one type of email."""
  emailUnsubscribe(
    """Unsubscription details."""
    input: EmailUnsubscribeInput!
  ): EmailUnsubscribePayload!

  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAccountAuthChallenge(
    """The data used for email authentication."""
    input: EmailUserAccountAuthChallengeInput!
  ): EmailUserAccountAuthChallengeResponse!

  """Creates a custom emoji."""
  emojiCreate(
    """The emoji object to create."""
    input: EmojiCreateInput!
  ): EmojiPayload!

  """Deletes an emoji."""
  emojiDelete(
    """The identifier of the emoji to delete."""
    id: String!
  ): DeletePayload!

  """Creates a new entity link."""
  entityExternalLinkCreate(
    """The entity link object to create."""
    input: EntityExternalLinkCreateInput!
  ): EntityExternalLinkPayload!

  """Deletes an entity link."""
  entityExternalLinkDelete(
    """The identifier of the entity link to delete."""
    id: String!
  ): DeletePayload!

  """Updates an entity link."""
  entityExternalLinkUpdate(
    """The identifier of the entity link to update."""
    id: String!

    """The entity link object to update."""
    input: EntityExternalLinkUpdateInput!
  ): EntityExternalLinkPayload!

  """Creates a new favorite (project, cycle etc)."""
  favoriteCreate(
    """The favorite object to create."""
    input: FavoriteCreateInput!
  ): FavoritePayload!

  """Deletes a favorite reference."""
  favoriteDelete(
    """The identifier of the favorite reference to delete."""
    id: String!
  ): DeletePayload!

  """Updates a favorite."""
  favoriteUpdate(
    """The identifier of the favorite to update."""
    id: String!

    """A partial favorite object to update the favorite with."""
    input: FavoriteUpdateInput!
  ): FavoritePayload!

  """
  XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
  """
  fileUpload(
    """MIME type of the uploaded file."""
    contentType: String!

    """Filename of the uploaded file."""
    filename: String!

    """Should the file be made publicly accessible (default: false)."""
    makePublic: Boolean

    """Optional metadata."""
    metaData: JSON

    """File size of the uploaded file."""
    size: Int!
  ): UploadPayload!

  """
  [INTERNAL] Permanently delete an uploaded file by asset URL. This should be used as a last resort and will break comments and documents that reference the asset.
  """
  fileUploadDangerouslyDelete(
    """The asset URL of the uploaded file to delete."""
    assetUrl: String!
  ): FileUploadDeletePayload!

  """Creates a new automation state."""
  gitAutomationStateCreate(
    """The automation state to create."""
    input: GitAutomationStateCreateInput!
  ): GitAutomationStatePayload!

  """Archives an automation state."""
  gitAutomationStateDelete(
    """The identifier of the automation state to archive."""
    id: String!
  ): DeletePayload!

  """Updates an existing state."""
  gitAutomationStateUpdate(
    """The identifier of the state to update."""
    id: String!

    """The state to update."""
    input: GitAutomationStateUpdateInput!
  ): GitAutomationStatePayload!

  """Creates a Git target branch automation."""
  gitAutomationTargetBranchCreate(
    """The Git target branch automation to create."""
    input: GitAutomationTargetBranchCreateInput!
  ): GitAutomationTargetBranchPayload!

  """Archives a Git target branch automation."""
  gitAutomationTargetBranchDelete(
    """The identifier of the Git target branch automation to archive."""
    id: String!
  ): DeletePayload!

  """Updates an existing Git target branch automation."""
  gitAutomationTargetBranchUpdate(
    """The identifier of the Git target branch automation to update."""
    id: String!

    """The updates."""
    input: GitAutomationTargetBranchUpdateInput!
  ): GitAutomationTargetBranchPayload!

  """
  Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
  """
  googleUserAccountAuth(
    """The data used for Google authentication."""
    input: GoogleUserAccountAuthInput!
  ): AuthResolverResponse!

  """Upload an image from an URL to Linear."""
  imageUploadFromUrl(
    """URL of the file to be uploaded to Linear."""
    url: String!
  ): ImageUploadFromUrlPayload!

  """
  XHR request payload to upload a file for import, directly to Linear's cloud storage.
  """
  importFileUpload(
    """MIME type of the uploaded file."""
    contentType: String!

    """Filename of the uploaded file."""
    filename: String!

    """Optional metadata."""
    metaData: JSON

    """File size of the uploaded file."""
    size: Int!
  ): UploadPayload!

  """Archives a initiative."""
  initiativeArchive(
    """The identifier of the initiative to archive."""
    id: String!
  ): InitiativeArchivePayload!

  """Creates a new initiative."""
  initiativeCreate(
    """The properties of the initiative to create."""
    input: InitiativeCreateInput!
  ): InitiativePayload!

  """Deletes (trashes) an initiative."""
  initiativeDelete(
    """The identifier of the initiative to delete."""
    id: String!
  ): DeletePayload!

  """Creates a new initiative relation."""
  initiativeRelationCreate(
    """The initiative relation to create."""
    input: InitiativeRelationCreateInput!
  ): InitiativeRelationPayload!

  """Deletes an initiative relation."""
  initiativeRelationDelete(
    """The identifier of the initiative relation to delete."""
    id: String!
  ): DeletePayload!

  """Updates an initiative relation."""
  initiativeRelationUpdate(
    """The identifier of the initiative relation to update."""
    id: String!

    """The properties of the initiative relation to update."""
    input: InitiativeRelationUpdateInput!
  ): DeletePayload!

  """Creates a new initiativeToProject join."""
  initiativeToProjectCreate(
    """The properties of the initiativeToProject to create."""
    input: InitiativeToProjectCreateInput!
  ): InitiativeToProjectPayload!

  """Deletes a initiativeToProject."""
  initiativeToProjectDelete(
    """The identifier of the initiativeToProject to delete."""
    id: String!
  ): DeletePayload!

  """Updates a initiativeToProject."""
  initiativeToProjectUpdate(
    """The identifier of the initiativeToProject to update."""
    id: String!

    """The properties of the initiativeToProject to update."""
    input: InitiativeToProjectUpdateInput!
  ): InitiativeToProjectPayload!

  """Unarchives a initiative."""
  initiativeUnarchive(
    """The identifier of the initiative to unarchive."""
    id: String!
  ): InitiativeArchivePayload!

  """Updates a initiative."""
  initiativeUpdate(
    """The identifier of the initiative to update."""
    id: String!

    """The properties of the initiative to update."""
    input: InitiativeUpdateInput!
  ): InitiativePayload!

  """Archives an initiative update."""
  initiativeUpdateArchive(
    """The identifier of the initiative update to archive."""
    id: String!
  ): InitiativeUpdateArchivePayload!

  """Creates a initiative update."""
  initiativeUpdateCreate(
    """The initiative update object to create."""
    input: InitiativeUpdateCreateInput!
  ): InitiativeUpdatePayload!

  """Unarchives an initiative update."""
  initiativeUpdateUnarchive(
    """The identifier of the initiative update to unarchive."""
    id: String!
  ): InitiativeUpdateArchivePayload!

  """Updates an update."""
  initiativeUpdateUpdate(
    """The identifier of the update to update."""
    id: String!

    """A data to update the update with."""
    input: InitiativeUpdateUpdateInput!
  ): InitiativeUpdatePayload!

  """Archives an integration."""
  integrationArchive(
    """The identifier of the integration to archive."""
    id: String!
  ): DeletePayload!

  """Connect a Slack channel to Asks."""
  integrationAsksConnectChannel(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): AsksChannelConnectPayload!

  """
  [INTERNAL] Refreshes the customer data attributes from the specified integration service.
  """
  integrationCustomerDataAttributesRefresh(
    """The integration service to refresh customer data attributes from."""
    input: IntegrationCustomerDataAttributesRefreshInput!
  ): IntegrationPayload!

  """Deletes an integration."""
  integrationDelete(
    """The identifier of the integration to delete."""
    id: String!

    """
    Whether to skip deleting the installation on the external service side.
    """
    skipInstallationDeletion: Boolean
  ): DeletePayload!

  """Integrates the organization with Discord."""
  integrationDiscord(
    """The Discord OAuth code."""
    code: String!

    """The Discord OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Integrates the organization with Figma."""
  integrationFigma(
    """The Figma OAuth code."""
    code: String!

    """The Figma OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Integrates the organization with Front."""
  integrationFront(
    """The Front OAuth code."""
    code: String!

    """The Front OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Connects the organization with a GitHub Enterprise Server."""
  integrationGitHubEnterpriseServerConnect(
    """The base URL of the GitHub Enterprise Server installation."""
    githubUrl: String!

    """The name of GitHub organization."""
    organizationName: String!
  ): GitHubEnterpriseServerPayload!

  """Connect your GitHub account to Linear."""
  integrationGitHubPersonal(
    """The GitHub OAuth code."""
    code: String!

    """Whether to connect with code access."""
    codeAccess: Boolean
  ): IntegrationPayload!

  """Generates a webhook for the GitHub commit integration."""
  integrationGithubCommitCreate: GitHubCommitIntegrationPayload!

  """Connects the organization with the GitHub App."""
  integrationGithubConnect(
    """The GitHub grant code that's exchanged for OAuth tokens."""
    code: String!

    """Whether the integration should have code access"""
    codeAccess: Boolean = false

    """The GitHub data to connect with."""
    installationId: String!
  ): IntegrationPayload!

  """Connects the organization with the GitHub Import App."""
  integrationGithubImportConnect(
    """The GitHub grant code that's exchanged for OAuth tokens."""
    code: String!

    """The GitHub data to connect with."""
    installationId: String!
  ): IntegrationPayload!

  """Refreshes the data for a GitHub import integration."""
  integrationGithubImportRefresh(
    """The id of the integration to update."""
    id: String!
  ): IntegrationPayload!

  """Connects the organization with a GitLab Access Token."""
  integrationGitlabConnect(
    """The GitLab Access Token to connect with."""
    accessToken: String!

    """The URL of the GitLab installation."""
    gitlabUrl: String!
  ): GitLabIntegrationCreatePayload!

  """Integrates the organization with Gong."""
  integrationGong(
    """The Gong OAuth code."""
    code: String!

    """The Gong OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """
  [Internal] Connects the Google Calendar to the user to this Linear account via OAuth2.
  """
  integrationGoogleCalendarPersonalConnect(
    """[Internal] The Google OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Google Sheets."""
  integrationGoogleSheets(
    """The Google OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Intercom."""
  integrationIntercom(
    """The Intercom OAuth code."""
    code: String!

    """
    The Intercom domain URL to use for the integration. Defaults to app.intercom.com if not provided.
    """
    domainUrl: String

    """The Intercom OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Disconnects the organization from Intercom."""
  integrationIntercomDelete: IntegrationPayload!

  """[DEPRECATED] Updates settings on the Intercom integration."""
  integrationIntercomSettingsUpdate(
    """
    A partial Intercom integration settings object to update the integration settings with.
    """
    input: IntercomSettingsInput!
  ): IntegrationPayload! @deprecated(reason: "This mutation is deprecated, please use `integrationSettingsUpdate` instead")

  """Connect your Jira account to Linear."""
  integrationJiraPersonal(
    """The Jira personal access token, when connecting using a PAT."""
    accessToken: String

    """The Jira OAuth code, when connecting using OAuth."""
    code: String
  ): IntegrationPayload!

  """[INTERNAL] Updates a Jira Integration."""
  integrationJiraUpdate(
    """Jira integration update input."""
    input: JiraUpdateInput!
  ): IntegrationPayload!

  """[INTERNAL] Integrates the organization with LaunchDarkly."""
  integrationLaunchDarklyConnect(
    """The LaunchDarkly OAuth code."""
    code: String!

    """The LaunchDarkly environment."""
    environment: String!

    """The LaunchDarkly project key."""
    projectKey: String!
  ): IntegrationPayload!

  """[INTERNAL] Integrates your personal account with LaunchDarkly."""
  integrationLaunchDarklyPersonalConnect(
    """The LaunchDarkly OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Enables Loom integration for the organization."""
  integrationLoom: IntegrationPayload! @deprecated(reason: "Not available.")

  """[INTERNAL] Integrates the organization with Opsgenie."""
  integrationOpsgenieConnect(
    """The Opsgenie API key."""
    apiKey: String!
  ): IntegrationPayload!

  """[INTERNAL] Refresh Opsgenie schedule mappings."""
  integrationOpsgenieRefreshScheduleMappings: IntegrationPayload!

  """[INTERNAL] Integrates the organization with PagerDuty."""
  integrationPagerDutyConnect(
    """The PagerDuty OAuth code."""
    code: String!

    """The PagerDuty OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """[INTERNAL] Refresh PagerDuty schedule mappings."""
  integrationPagerDutyRefreshScheduleMappings: IntegrationPayload!

  """Requests a currently unavailable integration."""
  integrationRequest(
    """Integration request details."""
    input: IntegrationRequestInput!
  ): IntegrationRequestPayload!

  """Integrates the organization with Salesforce."""
  integrationSalesforce(
    """The Salesforce OAuth code."""
    code: String!

    """The Salesforce OAuth redirect URI."""
    redirectUri: String!

    """The Salesforce installation subdomain."""
    subdomain: String!
  ): IntegrationPayload!

  """[INTERNAL] Refreshes the Salesforce integration metadata."""
  integrationSalesforceMetadataRefresh(
    """The ID of the integration to refresh metadata for."""
    id: String!
  ): IntegrationPayload!

  """Integrates the organization with Sentry."""
  integrationSentryConnect(
    """The Sentry grant code that's exchanged for OAuth tokens."""
    code: String!

    """The Sentry installationId to connect with."""
    installationId: String!

    """The slug of the Sentry organization being connected."""
    organizationSlug: String!
  ): IntegrationPayload!

  """[INTERNAL] Updates the integration settings."""
  integrationSettingsUpdate(
    """The identifier of the integration to update."""
    id: String!

    """An integration settings object."""
    input: IntegrationSettingsInput!
  ): IntegrationPayload! @deprecated(reason: "Use integrationUpdate instead.")

  """Integrates the organization with Slack."""
  integrationSlack(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean
  ): IntegrationPayload!

  """Integrates the organization with the Slack Asks app."""
  integrationSlackAsks(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Slack integration for custom view notifications."""
  integrationSlackCustomViewNotifications(
    """The Slack OAuth code."""
    code: String!

    """Integration's associated custom view."""
    customViewId: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): SlackChannelConnectPayload!

  """Integrates a Slack Asks channel with a Customer."""
  integrationSlackCustomerChannelLink(
    """The Slack OAuth code."""
    code: String!

    """The customer to link the Slack channel with"""
    customerId: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): SuccessPayload!

  """Imports custom emojis from your Slack workspace."""
  integrationSlackImportEmojis(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """[Internal] Slack integration for initiative notifications."""
  integrationSlackInitiativePost(
    """The Slack OAuth code."""
    code: String!

    """Integration's associated initiative."""
    initiativeId: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): SlackChannelConnectPayload!

  """
  Updates the Slack team's name in Linear for an existing Slack or Asks integration.
  """
  integrationSlackOrAsksUpdateSlackTeamName(
    """The integration ID."""
    integrationId: String!
  ): IntegrationSlackWorkspaceNamePayload!

  """
  [Internal] Slack integration for organization level initiative update notifications.
  """
  integrationSlackOrgInitiativeUpdatesPost(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): SlackChannelConnectPayload!

  """Slack integration for organization level project update notifications."""
  integrationSlackOrgProjectUpdatesPost(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): SlackChannelConnectPayload!

  """Integrates your personal notifications with Slack."""
  integrationSlackPersonal(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Slack integration for team notifications."""
  integrationSlackPost(
    """The Slack OAuth code."""
    code: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean

    """Integration's associated team."""
    teamId: String!
  ): SlackChannelConnectPayload!

  """Slack integration for project notifications."""
  integrationSlackProjectPost(
    """The Slack OAuth code."""
    code: String!

    """Integration's associated project."""
    projectId: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """
    The service to enable once connected, either 'notifications' or 'updates'.
    """
    service: String!
  ): SlackChannelConnectPayload!

  """Creates a new integrationTemplate join."""
  integrationTemplateCreate(
    """The properties of the integrationTemplate to create."""
    input: IntegrationTemplateCreateInput!
  ): IntegrationTemplatePayload!

  """Deletes a integrationTemplate."""
  integrationTemplateDelete(
    """The identifier of the integrationTemplate to delete."""
    id: String!
  ): DeletePayload!

  """[INTERNAL] Updates the integration."""
  integrationUpdate(
    """The identifier of the integration to update."""
    id: String!

    """A partial integration object to update the integration with."""
    input: IntegrationUpdateInput!
  ): IntegrationPayload!

  """Integrates the organization with Zendesk."""
  integrationZendesk(
    """The Zendesk OAuth code."""
    code: String!

    """The Zendesk OAuth redirect URI."""
    redirectUri: String!

    """The Zendesk OAuth scopes."""
    scope: String!

    """The Zendesk installation subdomain."""
    subdomain: String!
  ): IntegrationPayload!

  """Creates new settings for one or more integrations."""
  integrationsSettingsCreate(
    """The settings to create."""
    input: IntegrationsSettingsCreateInput!
  ): IntegrationsSettingsPayload!

  """Updates settings related to integrations for a project or a team."""
  integrationsSettingsUpdate(
    """The identifier of the settings to update."""
    id: String!

    """A settings object to update the settings with."""
    input: IntegrationsSettingsUpdateInput!
  ): IntegrationsSettingsPayload!

  """Adds a label to an issue."""
  issueAddLabel(
    """The identifier of the issue to add the label to."""
    id: String!

    """The identifier of the label to add."""
    labelId: String!
  ): IssuePayload!

  """Archives an issue."""
  issueArchive(
    """The identifier of the issue to archive."""
    id: String!

    """Whether to trash the issue."""
    trash: Boolean
  ): IssueArchivePayload!

  """Creates a list of issues in one transaction."""
  issueBatchCreate(
    """A list of issue objects to create."""
    input: IssueBatchCreateInput!
  ): IssueBatchPayload!

  """Updates multiple issues at once."""
  issueBatchUpdate(
    """The id's of the issues to update. Can't be more than 50 at a time."""
    ids: [UUID!]!

    """A partial issue object to update the issues with."""
    input: IssueUpdateInput!
  ): IssueBatchPayload!

  """Creates a new issue."""
  issueCreate(
    """The issue object to create."""
    input: IssueCreateInput!
  ): IssuePayload!

  """Deletes (trashes) an issue."""
  issueDelete(
    """The identifier of the issue to delete."""
    id: String!

    """
    Whether to permanently delete the issue and skip the grace period of 30 days. Available only to admins!
    """
    permanentlyDelete: Boolean
  ): IssueArchivePayload!

  """
  [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly.
  """
  issueDescriptionUpdateFromFront(
    """Description to update the issue with. """
    description: String!

    """The identifier of the issue to update."""
    id: String!
  ): IssuePayload!

  """Disables external sync on an issue."""
  issueExternalSyncDisable(
    """The ID of the sync attachment to disable."""
    attachmentId: String!
  ): IssuePayload!

  """Kicks off an Asana import job."""
  issueImportCreateAsana(
    """Asana team name to choose which issues we should import."""
    asanaTeamName: String!

    """Asana token to fetch information from the Asana API."""
    asanaToken: String!

    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """ID of the organization into which to import data."""
    organizationId: String @deprecated(reason: "Argument will be ignored. Use teamId to import in a specific team, or teamName to import into a new team.")

    """ID of the team into which to import data."""
    teamId: String

    """Name of new team. When teamId is not set."""
    teamName: String
  ): IssueImportPayload!

  """Kicks off a Jira import job from a CSV."""
  issueImportCreateCSVJira(
    """URL for the CSV."""
    csvUrl: String!

    """Jira user account email."""
    jiraEmail: String

    """Jira installation or cloud hostname."""
    jiraHostname: String

    """Jira personal access token to access Jira REST API."""
    jiraToken: String

    """ID of the organization into which to import data."""
    organizationId: String @deprecated(reason: "Argument will be ignored. Use teamId to import in a specific team, or teamName to import into a new team.")

    """ID of the team into which to import data. Empty to create new team."""
    teamId: String

    """Name of new team. When teamId is not set."""
    teamName: String
  ): IssueImportPayload!

  """Kicks off a Shortcut (formerly Clubhouse) import job."""
  issueImportCreateClubhouse(
    """
    Shortcut (formerly Clubhouse) group name to choose which issues we should import.
    """
    clubhouseGroupName: String!

    """
    Shortcut (formerly Clubhouse) token to fetch information from the Clubhouse API.
    """
    clubhouseToken: String!

    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """ID of the organization into which to import data."""
    organizationId: String @deprecated(reason: "Argument will be ignored. Use teamId to import in a specific team, or teamName to import into a new team.")

    """ID of the team into which to import data."""
    teamId: String

    """Name of new team. When teamId is not set."""
    teamName: String
  ): IssueImportPayload!

  """Kicks off a GitHub import job."""
  issueImportCreateGithub(
    """
    Labels to use to filter the import data. Only issues matching any of these filters will be imported.
    """
    githubLabels: [String!]

    """IDs of the Github repositories from which we will import data."""
    githubRepoIds: [Int!]

    """Whether or not we should import GitHub organization level projects."""
    githubShouldImportOrgProjects: Boolean @deprecated(reason: "Argument will be ignored. The project information of an issue is always imported regardless of whether the project is linked to the repository of the issue or not")

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """
    [DEPRECATED] ID of the Github import integration to use to access issues.
    """
    integrationId: String @deprecated(reason: "An import can span multiple integrations. Value will be ignored.")

    """ID of the organization into which to import data."""
    organizationId: String @deprecated(reason: "Argument will be ignored. Use teamId to import in a specific team, or teamName to import into a new team.")

    """ID of the team into which to import data."""
    teamId: String

    """Name of new team. When teamId is not set."""
    teamName: String
  ): IssueImportPayload!

  """Kicks off a Jira import job."""
  issueImportCreateJira(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """Jira user account email."""
    jiraEmail: String!

    """Jira installation or cloud hostname."""
    jiraHostname: String!

    """Jira project key from which we will import data."""
    jiraProject: String!

    """Jira personal access token to access Jira REST API."""
    jiraToken: String!

    """A custom JQL query to filter issues being imported"""
    jql: String

    """ID of the organization into which to import data."""
    organizationId: String @deprecated(reason: "Argument will be ignored. Use teamId to import in a specific team, or teamName to import into a new team.")

    """ID of the team into which to import data. Empty to create new team."""
    teamId: String

    """Name of new team. When teamId is not set."""
    teamName: String
  ): IssueImportPayload!

  """[INTERNAL] Kicks off a Linear to Linear import job."""
  issueImportCreateLinearV2(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """The source organization to import from."""
    linearSourceOrganizationId: String!
  ): IssueImportPayload!

  """Deletes an import job."""
  issueImportDelete(
    """ID of the issue import to delete."""
    issueImportId: String!
  ): IssueImportDeletePayload!

  """Kicks off import processing."""
  issueImportProcess(
    """ID of the issue import which we're going to process."""
    issueImportId: String!

    """The mapping configuration to use for processing the import."""
    mapping: JSONObject!
  ): IssueImportPayload!

  """Updates the mapping for the issue import."""
  issueImportUpdate(
    """The identifier of the issue import."""
    id: String!

    """The properties of the issue import to update."""
    input: IssueImportUpdateInput!
  ): IssueImportPayload!

  """Creates a new label."""
  issueLabelCreate(
    """The issue label to create."""
    input: IssueLabelCreateInput!

    """
    Whether to replace all team-specific labels with the same name with this newly created workspace label (default: false).
    """
    replaceTeamLabels: Boolean
  ): IssueLabelPayload!

  """Deletes an issue label."""
  issueLabelDelete(
    """The identifier of the label to delete."""
    id: String!
  ): DeletePayload!

  """Updates an label."""
  issueLabelUpdate(
    """The identifier of the label to update."""
    id: String!

    """A partial label object to update."""
    input: IssueLabelUpdateInput!

    """
    Whether to replace all team-specific labels with the same name with this updated workspace label (default: false).
    """
    replaceTeamLabels: Boolean
  ): IssueLabelPayload!

  """Creates a new issue relation."""
  issueRelationCreate(
    """The issue relation to create."""
    input: IssueRelationCreateInput!

    """Used by client undo operations. Should not be set directly."""
    overrideCreatedAt: DateTime
  ): IssueRelationPayload!

  """Deletes an issue relation."""
  issueRelationDelete(
    """The identifier of the issue relation to delete."""
    id: String!
  ): DeletePayload!

  """Updates an issue relation."""
  issueRelationUpdate(
    """The identifier of the issue relation to update."""
    id: String!

    """The properties of the issue relation to update."""
    input: IssueRelationUpdateInput!
  ): IssueRelationPayload!

  """
  Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached.
  """
  issueReminder(
    """The identifier of the issue to add a reminder for."""
    id: String!

    """The time when a reminder notification will be sent."""
    reminderAt: DateTime!
  ): IssuePayload!

  """Removes a label from an issue."""
  issueRemoveLabel(
    """The identifier of the issue to remove the label from."""
    id: String!

    """The identifier of the label to remove."""
    labelId: String!
  ): IssuePayload!

  """Subscribes a user to an issue."""
  issueSubscribe(
    """The identifier of the issue to subscribe to."""
    id: String!

    """The email of the user to subscribe, default is the current user."""
    userEmail: String

    """The identifier of the user to subscribe, default is the current user."""
    userId: String
  ): IssuePayload!

  """Unarchives an issue."""
  issueUnarchive(
    """The identifier of the issue to archive."""
    id: String!
  ): IssueArchivePayload!

  """Unsubscribes a user from an issue."""
  issueUnsubscribe(
    """The identifier of the issue to unsubscribe from."""
    id: String!

    """The email of the user to unsubscribe, default is the current user."""
    userEmail: String

    """
    The identifier of the user to unsubscribe, default is the current user.
    """
    userId: String
  ): IssuePayload!

  """Updates an issue."""
  issueUpdate(
    """The identifier of the issue to update."""
    id: String!

    """A partial issue object to update the issue with."""
    input: IssueUpdateInput!
  ): IssuePayload!

  """
  [INTERNAL] Connects the organization with a Jira Personal Access Token.
  """
  jiraIntegrationConnect(
    """Jira integration settings."""
    input: JiraConfigurationInput!
  ): IntegrationPayload!

  """Join an organization from onboarding."""
  joinOrganizationFromOnboarding(
    """Organization details for the organization to join."""
    input: JoinOrganizationInput!
  ): CreateOrJoinOrganizationResponse!

  """Leave an organization."""
  leaveOrganization(
    """ID of the organization to leave."""
    organizationId: String!
  ): CreateOrJoinOrganizationResponse!

  """Logout the client."""
  logout(
    """The reason for logging out."""
    reason: String
  ): LogoutResponse!

  """Logout all of user's sessions including the active one."""
  logoutAllSessions(
    """The reason for logging out."""
    reason: String
  ): LogoutResponse!

  """Logout all of user's sessions excluding the current one."""
  logoutOtherSessions(
    """The reason for logging out."""
    reason: String
  ): LogoutResponse!

  """Logout an individual session with its ID."""
  logoutSession(
    """ID of the session to logout."""
    sessionId: String!
  ): LogoutResponse!

  """Archives a notification."""
  notificationArchive(
    """The id of the notification to archive."""
    id: String!
  ): NotificationArchivePayload!

  """Archives a notification and all related notifications."""
  notificationArchiveAll(
    """The type and id of the entity to archive notifications for."""
    input: NotificationEntityInput!
  ): NotificationBatchActionPayload!

  """
  Subscribes to or unsubscribes from a notification category for a given notification channel for the user
  """
  notificationCategoryChannelSubscriptionUpdate(
    """The notification category to subscribe to or unsubscribe from"""
    category: NotificationCategory!

    """
    The notification channel in which to subscribe to or unsubscribe from the category
    """
    channel: NotificationChannel!

    """
    True if the user wants to subscribe, false if the user wants to unsubscribe
    """
    subscribe: Boolean!
  ): UserSettingsPayload!

  """Marks notification and all related notifications as read."""
  notificationMarkReadAll(
    """The type and id of the entity to archive notifications for."""
    input: NotificationEntityInput!

    """The time when notification was marked as read."""
    readAt: DateTime!
  ): NotificationBatchActionPayload!

  """Marks notification and all related notifications as unread."""
  notificationMarkUnreadAll(
    """The type and id of the entity to archive notifications for."""
    input: NotificationEntityInput!
  ): NotificationBatchActionPayload!

  """Snoozes a notification and all related notifications."""
  notificationSnoozeAll(
    """The type and id of the entity to archive notifications for."""
    input: NotificationEntityInput!

    """
    The time until a notification will be snoozed. After that it will appear in the inbox again.
    """
    snoozedUntilAt: DateTime!
  ): NotificationBatchActionPayload!

  """
  Creates a new notification subscription for a cycle, custom view, label, project or team.
  """
  notificationSubscriptionCreate(
    """The subscription object to create."""
    input: NotificationSubscriptionCreateInput!
  ): NotificationSubscriptionPayload!

  """Deletes a notification subscription reference."""
  notificationSubscriptionDelete(
    """The identifier of the notification subscription reference to delete."""
    id: String!
  ): DeletePayload! @deprecated(reason: "Update `notificationSubscription.active` to `false` instead.")

  """Updates a notification subscription."""
  notificationSubscriptionUpdate(
    """The identifier of the notification subscription to update."""
    id: String!

    """
    A partial notification subscription object to update the notification subscription with.
    """
    input: NotificationSubscriptionUpdateInput!
  ): NotificationSubscriptionPayload!

  """Unarchives a notification."""
  notificationUnarchive(
    """The id of the notification to archive."""
    id: String!
  ): NotificationArchivePayload!

  """Unsnoozes a notification and all related notifications."""
  notificationUnsnoozeAll(
    """The type and id of the entity to archive notifications for."""
    input: NotificationEntityInput!

    """The time when the notification was unsnoozed."""
    unsnoozedAt: DateTime!
  ): NotificationBatchActionPayload!

  """Updates a notification."""
  notificationUpdate(
    """The identifier of the notification to update."""
    id: String!

    """A partial notification object to update the notification with."""
    input: NotificationUpdateInput!
  ): NotificationPayload!

  """
  Cancels the deletion of an organization. Administrator privileges required.
  """
  organizationCancelDelete: OrganizationCancelDeletePayload!

  """Delete's an organization. Administrator privileges required."""
  organizationDelete(
    """Information required to delete an organization."""
    input: DeleteOrganizationInput!
  ): OrganizationDeletePayload!

  """
  Get an organization's delete confirmation token. Administrator privileges required.
  """
  organizationDeleteChallenge: OrganizationDeletePayload!

  """[INTERNAL] Verifies a domain claim."""
  organizationDomainClaim(
    """The ID of the organization domain to claim."""
    id: String!
  ): OrganizationDomainSimplePayload!

  """[INTERNAL] Adds a domain to be allowed for an organization."""
  organizationDomainCreate(
    """The organization domain entry to create."""
    input: OrganizationDomainCreateInput!

    """Whether to trigger an email verification flow during domain creation."""
    triggerEmailVerification: Boolean
  ): OrganizationDomainPayload!

  """Deletes a domain."""
  organizationDomainDelete(
    """The identifier of the domain to delete."""
    id: String!
  ): DeletePayload!

  """[INTERNAL] Updates an organization domain settings."""
  organizationDomainUpdate(
    """The identifier of the domain to update."""
    id: String!

    """The organization domain entry to update."""
    input: OrganizationDomainUpdateInput!
  ): OrganizationDomainPayload!

  """[INTERNAL] Verifies a domain to be added to an organization."""
  organizationDomainVerify(
    """The organization domain to verify."""
    input: OrganizationDomainVerificationInput!
  ): OrganizationDomainPayload!

  """Creates a new organization invite."""
  organizationInviteCreate(
    """The organization invite object to create."""
    input: OrganizationInviteCreateInput!
  ): OrganizationInvitePayload!

  """Deletes an organization invite."""
  organizationInviteDelete(
    """The identifier of the organization invite to delete."""
    id: String!
  ): DeletePayload!

  """Updates an organization invite."""
  organizationInviteUpdate(
    """The identifier of the organization invite to update."""
    id: String!

    """The updates to make to the organization invite object."""
    input: OrganizationInviteUpdateInput!
  ): OrganizationInvitePayload!

  """
  [DEPRECATED] Starts a trial for the organization. Administrator privileges required.
  """
  organizationStartTrial: OrganizationStartTrialPayload! @deprecated(reason: "Use organizationStartTrialForPlan")

  """
  Starts a trial for the organization on the specified plan type. Administrator privileges required.
  """
  organizationStartTrialForPlan(
    """Plan details for trial"""
    input: OrganizationStartTrialInput!
  ): OrganizationStartTrialPayload!

  """Updates the user's organization."""
  organizationUpdate(
    """A partial organization object to update the organization with."""
    input: OrganizationUpdateInput!
  ): OrganizationPayload!

  """[INTERNAL] Finish passkey login process."""
  passkeyLoginFinish(
    """Random ID to start passkey login with."""
    authId: String!
    response: JSONObject!
  ): AuthResolverResponse!

  """[INTERNAL] Starts passkey login process."""
  passkeyLoginStart(
    """Random ID to start passkey login with."""
    authId: String!
  ): PasskeyLoginStartResponse!

  """Adds a label to a project."""
  projectAddLabel(
    """The identifier of the project to add the label to."""
    id: String!

    """The identifier of the label to add."""
    labelId: String!
  ): ProjectPayload!

  """Archives a project."""
  projectArchive(
    """
    The identifier of the project to archive. Also the identifier from the URL is accepted.
    """
    id: String!

    """Whether to trash the project."""
    trash: Boolean
  ): ProjectArchivePayload! @deprecated(reason: "Deprecated in favor of projectDelete.")

  """Creates a new project."""
  projectCreate(
    """Whether to connect a Slack channel to the project."""
    connectSlackChannel: Boolean

    """The issue object to create."""
    input: ProjectCreateInput!
  ): ProjectPayload!

  """Deletes (trashes) a project."""
  projectDelete(
    """The identifier of the project to delete."""
    id: String!
  ): ProjectArchivePayload!

  """Creates a new project label."""
  projectLabelCreate(
    """The project label to create."""
    input: ProjectLabelCreateInput!
  ): ProjectLabelPayload!

  """Deletes a project label."""
  projectLabelDelete(
    """The identifier of the label to delete."""
    id: String!
  ): DeletePayload!

  """Updates a project label."""
  projectLabelUpdate(
    """The identifier of the label to update."""
    id: String!

    """A partial label object to update."""
    input: ProjectLabelUpdateInput!
  ): ProjectLabelPayload!

  """Creates a new project milestone."""
  projectMilestoneCreate(
    """The project milestone to create."""
    input: ProjectMilestoneCreateInput!
  ): ProjectMilestonePayload!

  """Deletes a project milestone."""
  projectMilestoneDelete(
    """The identifier of the project milestone to delete."""
    id: String!
  ): DeletePayload!

  """
  [Internal] Moves a project milestone to another project, can be called to undo a prior move.
  """
  projectMilestoneMove(
    """The identifier of the project milestone to move."""
    id: String!

    """
    The project to move the milestone to, as well as any additional options need to make a successful move, or undo a previous move.
    """
    input: ProjectMilestoneMoveInput!
  ): ProjectMilestoneMovePayload!

  """Updates a project milestone."""
  projectMilestoneUpdate(
    """
    The identifier of the project milestone to update. Also the identifier from the URL is accepted.
    """
    id: String!

    """A partial object to update the project milestone with."""
    input: ProjectMilestoneUpdateInput!
  ): ProjectMilestonePayload!

  """
  [INTERNAL] Updates all projects currently assigned to to a project status to a new project status.
  """
  projectReassignStatus(
    """The identifier of the new project status to update the projects to."""
    newProjectStatusId: String!

    """
    The identifier of the project status with which projects will be updated.
    """
    originalProjectStatusId: String!
  ): SuccessPayload!

  """Creates a new project relation."""
  projectRelationCreate(
    """The project relation to create."""
    input: ProjectRelationCreateInput!
  ): ProjectRelationPayload!

  """Deletes a project relation."""
  projectRelationDelete(
    """The identifier of the project relation to delete."""
    id: String!
  ): DeletePayload!

  """Updates a project relation."""
  projectRelationUpdate(
    """The identifier of the project relation to update."""
    id: String!

    """The properties of the project relation to update."""
    input: ProjectRelationUpdateInput!
  ): ProjectRelationPayload!

  """Removes a label from a project."""
  projectRemoveLabel(
    """The identifier of the project to remove the label from."""
    id: String!

    """The identifier of the label to remove."""
    labelId: String!
  ): ProjectPayload!

  """Archives a project status."""
  projectStatusArchive(
    """The identifier of the project status to archive."""
    id: String!
  ): ProjectStatusArchivePayload!

  """Creates a new project status."""
  projectStatusCreate(
    """The ProjectStatus object to create."""
    input: ProjectStatusCreateInput!
  ): ProjectStatusPayload!

  """Unarchives a project status."""
  projectStatusUnarchive(
    """The identifier of the project status to unarchive."""
    id: String!
  ): ProjectStatusArchivePayload!

  """Updates a project status."""
  projectStatusUpdate(
    """The identifier of the project status to update."""
    id: String!

    """A partial ProjectStatus object to update the ProjectStatus with."""
    input: ProjectStatusUpdateInput!
  ): ProjectStatusPayload!

  """Unarchives a project."""
  projectUnarchive(
    """
    The identifier of the project to restore. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ProjectArchivePayload!

  """Updates a project."""
  projectUpdate(
    """
    The identifier of the project to update. Also the identifier from the URL is accepted.
    """
    id: String!

    """A partial project object to update the project with."""
    input: ProjectUpdateInput!
  ): ProjectPayload!

  """Archives a project update."""
  projectUpdateArchive(
    """The identifier of the project update to archive."""
    id: String!
  ): ProjectUpdateArchivePayload!

  """Creates a new project update."""
  projectUpdateCreate(
    """Data for the project update to create."""
    input: ProjectUpdateCreateInput!
  ): ProjectUpdatePayload!

  """Deletes a project update."""
  projectUpdateDelete(
    """The identifier of the project update to delete."""
    id: String!
  ): DeletePayload! @deprecated(reason: "Use `projectUpdateArchive` instead.")

  """Unarchives a project update."""
  projectUpdateUnarchive(
    """The identifier of the project update to unarchive."""
    id: String!
  ): ProjectUpdateArchivePayload!

  """Updates a project update."""
  projectUpdateUpdate(
    """The identifier of the project update to update."""
    id: String!

    """A data to update the project update with."""
    input: ProjectUpdateUpdateInput!
  ): ProjectUpdatePayload!

  """Creates a push subscription."""
  pushSubscriptionCreate(
    """The push subscription to create."""
    input: PushSubscriptionCreateInput!
  ): PushSubscriptionPayload!

  """Deletes a push subscription."""
  pushSubscriptionDelete(
    """The identifier of the push subscription to delete."""
    id: String!
  ): PushSubscriptionPayload!

  """Creates a new reaction."""
  reactionCreate(
    """The reaction object to create."""
    input: ReactionCreateInput!
  ): ReactionPayload!

  """Deletes a reaction."""
  reactionDelete(
    """The identifier of the reaction to delete."""
    id: String!
  ): DeletePayload!

  """Manually update Google Sheets data."""
  refreshGoogleSheetsData(
    """The identifier of the Google Sheets integration to update."""
    id: String!

    """The type of export."""
    type: String
  ): IntegrationPayload!

  """Re-send an organization invite."""
  resendOrganizationInvite(
    """The identifier of the organization invite to re-send."""
    id: String!
  ): DeletePayload!

  """Re-send an organization invite tied to an email address."""
  resendOrganizationInviteByEmail(
    """The email address tied to the organization invite to re-send."""
    email: String!
  ): DeletePayload!

  """Archives a roadmap."""
  roadmapArchive(
    """The identifier of the roadmap to archive."""
    id: String!
  ): RoadmapArchivePayload! @deprecated(reason: "Roadmaps are deprecated, use initiatives instead.")

  """Creates a new roadmap."""
  roadmapCreate(
    """The properties of the roadmap to create."""
    input: RoadmapCreateInput!
  ): RoadmapPayload! @deprecated(reason: "Roadmaps are deprecated, use initiatives instead.")

  """Deletes a roadmap."""
  roadmapDelete(
    """The identifier of the roadmap to delete."""
    id: String!
  ): DeletePayload! @deprecated(reason: "Roadmaps are deprecated, use initiatives instead.")

  """Creates a new roadmapToProject join."""
  roadmapToProjectCreate(
    """The properties of the roadmapToProject to create."""
    input: RoadmapToProjectCreateInput!
  ): RoadmapToProjectPayload!

  """Deletes a roadmapToProject."""
  roadmapToProjectDelete(
    """The identifier of the roadmapToProject to delete."""
    id: String!
  ): DeletePayload!

  """Updates a roadmapToProject."""
  roadmapToProjectUpdate(
    """The identifier of the roadmapToProject to update."""
    id: String!

    """The properties of the roadmapToProject to update."""
    input: RoadmapToProjectUpdateInput!
  ): RoadmapToProjectPayload!

  """Unarchives a roadmap."""
  roadmapUnarchive(
    """The identifier of the roadmap to unarchive."""
    id: String!
  ): RoadmapArchivePayload! @deprecated(reason: "Roadmaps are deprecated, use initiatives instead.")

  """Updates a roadmap."""
  roadmapUpdate(
    """The identifier of the roadmap to update."""
    id: String!

    """The properties of the roadmap to update."""
    input: RoadmapUpdateInput!
  ): RoadmapPayload! @deprecated(reason: "Roadmaps are deprecated, use initiatives instead.")

  """
  Authenticates a user account via email and authentication token for SAML.
  """
  samlTokenUserAccountAuth(
    """The data used for token authentication."""
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!

  """
  Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
  """
  teamCreate(
    """The team id to copy settings from, if any."""
    copySettingsFromTeamId: String

    """The team object to create."""
    input: TeamCreateInput!
  ): TeamPayload!

  """Deletes team's cycles data"""
  teamCyclesDelete(
    """The identifier of the team, which cycles will be deleted."""
    id: String!
  ): TeamPayload!

  """Deletes a team."""
  teamDelete(
    """The identifier of the team to delete."""
    id: String!
  ): DeletePayload!

  """Deletes a previously used team key."""
  teamKeyDelete(
    """The identifier of the team key to delete."""
    id: String!
  ): DeletePayload!

  """Creates a new team membership."""
  teamMembershipCreate(
    """The team membership object to create."""
    input: TeamMembershipCreateInput!
  ): TeamMembershipPayload!

  """Deletes a team membership."""
  teamMembershipDelete(
    """Whether to leave the parent teams."""
    alsoLeaveParentTeams: Boolean

    """The identifier of the team membership to delete."""
    id: String!
  ): DeletePayload!

  """Updates a team membership."""
  teamMembershipUpdate(
    """The identifier of the team membership to update."""
    id: String!

    """A partial team membership object to update the team membership with."""
    input: TeamMembershipUpdateInput!
  ): TeamMembershipPayload!

  """Unarchives a team and cancels deletion."""
  teamUnarchive(
    """The identifier of the team to delete."""
    id: String!
  ): TeamArchivePayload!

  """Updates a team."""
  teamUpdate(
    """The identifier of the team to update."""
    id: String!

    """A partial team object to update the team with."""
    input: TeamUpdateInput!

    """
    [INTERNAL] Mapping of existing team entities to those inherited from the parent team
    """
    mapping: InheritanceEntityMapping
  ): TeamPayload!

  """Creates a new template."""
  templateCreate(
    """The template object to create."""
    input: TemplateCreateInput!
  ): TemplatePayload!

  """Deletes a template."""
  templateDelete(
    """The identifier of the template to delete."""
    id: String!
  ): DeletePayload!

  """Updates an existing template."""
  templateUpdate(
    """The identifier of the template."""
    id: String!

    """The properties of the template to update."""
    input: TemplateUpdateInput!
  ): TemplatePayload!

  """Creates a new time schedule."""
  timeScheduleCreate(
    """The properties of the time schedule to create."""
    input: TimeScheduleCreateInput!
  ): TimeSchedulePayload!

  """Deletes a time schedule."""
  timeScheduleDelete(
    """The identifier of the time schedule to delete."""
    id: String!
  ): DeletePayload!

  """Refresh the integration schedule information."""
  timeScheduleRefreshIntegrationSchedule(
    """The identifier of the time schedule to refresh."""
    id: String!
  ): TimeSchedulePayload!

  """Updates a time schedule."""
  timeScheduleUpdate(
    """The identifier of the time schedule to update."""
    id: String!

    """The properties of the time schedule to update."""
    input: TimeScheduleUpdateInput!
  ): TimeSchedulePayload!

  """Upsert an external time schedule."""
  timeScheduleUpsertExternal(
    """The unique identifier of the external schedule."""
    externalId: String!

    """The properties of the time schedule to insert or update."""
    input: TimeScheduleUpdateInput!
  ): TimeSchedulePayload!

  """Creates a new triage responsibility."""
  triageResponsibilityCreate(
    """The properties of the triage responsibility to create."""
    input: TriageResponsibilityCreateInput!
  ): TriageResponsibilityPayload!

  """Deletes a triage responsibility."""
  triageResponsibilityDelete(
    """The identifier of the triage responsibility to delete."""
    id: String!
  ): DeletePayload!

  """Updates an existing triage responsibility."""
  triageResponsibilityUpdate(
    """The identifier of the triage responsibility to update."""
    id: String!

    """The properties of the triage responsibility to update."""
    input: TriageResponsibilityUpdateInput!
  ): TriageResponsibilityPayload!

  """[Internal] Updates existing Slack integration scopes."""
  updateIntegrationSlackScopes(
    """The Slack OAuth code."""
    code: String!

    """The ID of the existing Slack integration"""
    integrationId: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Makes user a regular user. Can only be called by an admin."""
  userDemoteAdmin(
    """The identifier of the user to make a regular user."""
    id: String!
  ): UserAdminPayload!

  """Makes user a guest. Can only be called by an admin."""
  userDemoteMember(
    """The identifier of the user to make a guest."""
    id: String!
  ): UserAdminPayload!

  """Connects the Discord user to this Linear account via OAuth2."""
  userDiscordConnect(
    """The Discord OAuth code."""
    code: String!

    """The Discord OAuth redirect URI."""
    redirectUri: String!
  ): UserPayload!

  """Disconnects the external user from this Linear account."""
  userExternalUserDisconnect(
    """The external service to disconnect."""
    service: String!
  ): UserPayload!

  """Updates a user's settings flag."""
  userFlagUpdate(
    """Settings flag to increment."""
    flag: UserFlagType!

    """Flag operation to perform."""
    operation: UserFlagUpdateOperation!
  ): UserSettingsFlagPayload!

  """Makes user an admin. Can only be called by an admin."""
  userPromoteAdmin(
    """The identifier of the user to make an admin."""
    id: String!
  ): UserAdminPayload!

  """Makes user a regular user. Can only be called by an admin."""
  userPromoteMember(
    """The identifier of the user to make a regular user."""
    id: String!
  ): UserAdminPayload!

  """Resets user's setting flags."""
  userSettingsFlagsReset(
    """The flags to reset. If not provided all flags will be reset."""
    flags: [UserFlagType!]
  ): UserSettingsFlagsResetPayload!

  """Updates the user's settings."""
  userSettingsUpdate(
    """The identifier of the userSettings to update."""
    id: String!

    """A partial notification object to update the settings with."""
    input: UserSettingsUpdateInput!
  ): UserSettingsPayload!

  """Suspends a user. Can only be called by an admin."""
  userSuspend(
    """The identifier of the user to suspend."""
    id: String!
  ): UserAdminPayload!

  """
  Unlinks a guest user from their identity provider. Can only be called by an admin when SCIM is enabled.
  """
  userUnlinkFromIdentityProvider(
    """
    The identifier of the guest user to unlink from their identity provider.
    """
    id: String!
  ): UserAdminPayload!

  """Un-suspends a user. Can only be called by an admin."""
  userUnsuspend(
    """The identifier of the user to unsuspend."""
    id: String!
  ): UserAdminPayload!

  """
  Updates a user. Only available to organization admins and the user themselves.
  """
  userUpdate(
    """
    The identifier of the user to update. Use `me` to reference currently authenticated user.
    """
    id: String!

    """A partial user object to update the user with."""
    input: UserUpdateInput!
  ): UserPayload!

  """Creates a new ViewPreferences object."""
  viewPreferencesCreate(
    """The ViewPreferences object to create."""
    input: ViewPreferencesCreateInput!
  ): ViewPreferencesPayload!

  """Deletes a ViewPreferences."""
  viewPreferencesDelete(
    """The identifier of the ViewPreferences to delete."""
    id: String!
  ): DeletePayload!

  """Updates an existing ViewPreferences object."""
  viewPreferencesUpdate(
    """The identifier of the ViewPreferences object."""
    id: String!

    """The properties of the view preferences."""
    input: ViewPreferencesUpdateInput!
  ): ViewPreferencesPayload!

  """Creates a new webhook."""
  webhookCreate(
    """The webhook object to create."""
    input: WebhookCreateInput!
  ): WebhookPayload!

  """Deletes a Webhook."""
  webhookDelete(
    """The identifier of the Webhook to delete."""
    id: String!
  ): DeletePayload!

  """Updates an existing Webhook."""
  webhookUpdate(
    """The identifier of the Webhook."""
    id: String!

    """The properties of the Webhook."""
    input: WebhookUpdateInput!
  ): WebhookPayload!

  """
  Archives a state. Only states with issues that have all been archived can be archived.
  """
  workflowStateArchive(
    """The identifier of the state to archive."""
    id: String!
  ): WorkflowStateArchivePayload!

  """Creates a new state, adding it to the workflow of a team."""
  workflowStateCreate(
    """The state to create."""
    input: WorkflowStateCreateInput!
  ): WorkflowStatePayload!

  """Updates a state."""
  workflowStateUpdate(
    """The identifier of the state to update."""
    id: String!

    """A partial state object to update."""
    input: WorkflowStateUpdateInput!
  ): WorkflowStatePayload!
}